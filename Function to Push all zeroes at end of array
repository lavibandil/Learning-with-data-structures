1st Approach-

    void pushZerosToEnd(int[] arr, int n) {
        
        
        int indexOfZero=0;
  
        //finding first position of zero
        while(indexOfZero<n && arr[indexOfZero]!=0)
        {
            indexOfZero++;
        }
        
        //if no zero found in array
         if(indexOfZero==n)
         return;
         
        //initiating pointer to traverse array
        int p=indexOfZero+1;
        
        while(p<n)
        {
            if(arr[p]!=0)
            {
                //swapping
                arr[indexOfZero]=arr[p];
                arr[p]=0;
                indexOfZero++;
            }
            p++;
        }
        
        
    }



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


2nd Approach-   **Time Efficeint**

    // Function which pushes all zeros to end of an array. 
    static void pushZerosToEnd(int arr[], int n) 
    { 
        int count = 0;  // Count of non-zero elements 
  
        // Traverse the array. If element encountered is 
        // non-zero, then replace the element at index 'count' 
        // with this element 
        for (int i = 0; i < n; i++) 
            if (arr[i] != 0) 
                arr[count++] = arr[i]; // here count is 
                                       // incremented 
  
        // Now all non-zero elements have been shifted to 
        // front and 'count' is set as index of first 0. 
        // Make all elements 0 from count to end. 
        while (count < n) 
            arr[count++] = 0; 
    } 
  
   
    } 
